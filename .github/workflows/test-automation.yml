name: Test Automation

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 수동 실행 옵션

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flask pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Create necessary directories and files
      run: |
        mkdir -p cases reports tests
        # Create __init__.py
        touch tests/__init__.py
        
        # Create basic test functions 
        cat > tests/functions.py << EOF
def add_test(a, b, expected=None):
    """
    두 숫자를 더하는 테스트
    """
    result = a + b
    if expected is not None and result != expected:
        return {"status": "FAIL", "error": "Expected " + str(expected) + " but got " + str(result)}
    return {"status": "PASS", "result": str(result)}

def multiply_test(a, b, expected=None):
    """
    두 숫자를 곱하는 테스트
    """
    result = a * b
    if expected is not None and result != expected:
        return {"status": "FAIL", "error": "Expected " + str(expected) + " but got " + str(result)}
    return {"status": "PASS", "result": str(result)}
EOF
        
        # Create sample test case
        cat > cases/addition_test.json << 'EOF'
{
  "name": "덧셈 테스트",
  "description": "두 숫자 덧셈을 테스트합니다",
  "test_function": "add_test",
  "parameters": {
    "a": 5,
    "b": 3,
    "expected": 8
  }
}
EOF
        
        # Create sample test case
        cat > cases/multiplication_test.json << 'EOF'
{
  "name": "곱셈 테스트",
  "description": "두 숫자 곱셈을 테스트합니다",
  "test_function": "multiply_test",
  "parameters": {
    "a": 4,
    "b": 5,
    "expected": 20
  }
}
EOF
        
        # Create runner script
        cat > runner.py << 'EOF'
import os
import json
import importlib
from datetime import datetime

def run_test_case(filename):
    """테스트 케이스 파일을 실행하고 결과를 반환합니다."""
    try:
        # 파일 읽기
        with open(os.path.join('cases', filename), 'r', encoding='utf-8') as f:
            case = json.load(f)
        
        # 테스트 함수 가져오기
        module = importlib.import_module('tests.functions')
        test_func = getattr(module, case['test_function'])
        
        # 파라미터 가져오기
        params = case.get('parameters', {})
        
        # 테스트 실행
        start_time = datetime.now()
        result = test_func(**params)
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        # 결과 반환
        return {
            'test_case': case,
            'result': result,
            'duration': duration,
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
    except Exception as e:
        # 오류 발생시
        return {
            'test_case': {'name': filename, 'test_function': 'unknown'},
            'result': {'status': 'ERROR', 'error': str(e)},
            'duration': 0,
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
EOF
        
        # Create test runner script
        cat > run_tests.py << 'EOF'
import os
import json
import sys
from datetime import datetime
from runner import run_test_case

# 테스트 결과 디렉토리 생성
os.makedirs('reports', exist_ok=True)

# 테스트 케이스 목록 로드
cases = []
if os.path.exists('cases'):
    for filename in os.listdir('cases'):
        if filename.endswith('.json'):
            try:
                with open(os.path.join('cases', filename), 'r', encoding='utf-8') as f:
                    case = json.load(f)
                    case['filename'] = filename
                    cases.append(case)
            except Exception as e:
                print(f'Error reading file {filename}: {str(e)}')
else:
    print('Cases directory not found')
    
print(f'Found {len(cases)} test cases')

# 테스트 실행
results = []
for case in cases:
    print(f'Running test case: {case.get("name", "Unknown")}')
    result = run_test_case(case['filename'])
    results.append(result)
    print(f'Test result: {result["result"]["status"]}')

# 결과 저장
timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
report_file = f'reports/test_report_{timestamp}.json'
with open(report_file, 'w', encoding='utf-8') as f:
    json.dump(results, f, indent=2, ensure_ascii=False)

print(f'Test report saved to {report_file}')

# HTML 보고서 생성
html = f'''
<!DOCTYPE html>
<html>
<head>
    <title>Test Automation Report</title>
    <style>
        body {{ font-family: Arial, sans-serif; padding: 20px; }}
        .header {{ margin-bottom: 20px; }}
        .pass {{ color: green; }}
        .fail {{ color: red; }}
        .summary {{ margin: 20px 0; padding: 15px; background-color: #f8f9fa; border-radius: 5px; }}
        table {{ border-collapse: collapse; width: 100%; }}
        th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
        th {{ background-color: #f2f2f2; }}
        tr:nth-child(even) {{ background-color: #f9f9f9; }}
    </style>
</head>
<body>
    <div class="header">
        <h1>Test Automation Report</h1>
        <p>Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
    </div>
    
    <div class="summary">
        <h3>Summary</h3>
        <p>Total Tests: {len(results)}</p>
        <p>Passed: <span class="pass">{sum(1 for r in results if r['result']['status'] == 'PASS')}</span></p>
        <p>Failed: <span class="fail">{sum(1 for r in results if r['result']['status'] in ['FAIL', 'ERROR'])}</span></p>
        <p>Success Rate: {sum(1 for r in results if r['result']['status'] == 'PASS') / len(results) * 100 if results else 0:.2f}%</p>
    </div>
    
    <h3>Test Results</h3>
    <table>
        <thead>
            <tr>
                <th>Test Case</th>
                <th>Function</th>
                <th>Status</th>
                <th>Details</th>
            </tr>
        </thead>
        <tbody>
'''

for result in results:
    test_case_name = result['test_case'].get('name', 'Unknown')
    test_function = result['test_case'].get('test_function', 'Unknown')
    status = result['result']['status']
    status_class = 'pass' if status == 'PASS' else 'fail'
    details = result['result'].get('result', '') or result['result'].get('error', '')
    
    html += f'''
        <tr>
            <td>{test_case_name}</td>
            <td>{test_function}</td>
            <td class="{status_class}">{status}</td>
            <td>{details}</td>
        </tr>
    '''

html += '''
        </tbody>
    </table>
</body>
</html>
'''

# HTML 파일 저장
html_report = os.path.join('reports', 'test_report.html')
with open(html_report, 'w', encoding='utf-8') as f:
    f.write(html)

print(f'HTML report generated: {html_report}')

# 요약 출력
pass_count = sum(1 for r in results if r['result']['status'] == 'PASS')
fail_count = sum(1 for r in results if r['result']['status'] == 'FAIL' or r['result']['status'] == 'ERROR')
total_count = len(results)

print(f'\nTest Summary:')
print(f'Total Tests: {total_count}')
print(f'Passed: {pass_count}')
print(f'Failed/Errors: {fail_count}')
if total_count > 0:
    success_rate = pass_count/total_count*100
    print(f'Success Rate: {success_rate:.2f}%')
else:
    print('Success Rate: N/A')
EOF
        
        # Create simple HTML report for test
        echo "<html><body><h1>Test Report</h1><p>This is a sample test report</p></body></html>" > reports/test_report.html
        echo '{"sample": "test"}' > reports/test_report_sample.json
    
    - name: Run tests
      run: python run_tests.py
    
    - name: Debug reports directory
      run: |
        echo "Contents of reports directory:"
        ls -la reports/
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: reports/
        if-no-files-found: warn 